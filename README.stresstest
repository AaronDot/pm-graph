------------------------------------------------------------------
|                          OVERVIEW                              |
------------------------------------------------------------------

 The stresstest tool is used to connect with and configure remote
 machines on the network for running stress tests with sleepgraph.

------------------------------------------------------------------
|                           USAGE                                |
------------------------------------------------------------------

 The tool is capable of issuing multiple commands which are used
 to configure remote machines for sleepgraph stress testing

 Usage: stresstest.py -config configfile -kernel version [command]

 All the arguments present in stress.py -h can be set via the config
 file option. In fact this is the preferred method. You can place
 whichever arguments that will likely not change into a single config
 to reduce the command line complexity. It uses the [setup] section.

 build - build a linux kernel from source into a deb/rpm package

  Required args:
  -pkgfmt type          kernel package format [rpm/deb] (default: deb)
  -ksrc folder          kernel source folder (required to build)
  Optional args:
  -pkgout folder        output folder for kernel packages (default: ksrc/..)
  -kname string         kernel name as "<version>-<name>" (default: <version>)
  -kcfg folder          config & patches folder (default: use .config in ksrc)
  -ktag gittag          kernel source git tag (default: no change)

 bisect - bisect a kernel by building locally and testing remotely

  Required args:
  -ksrc folder          kernel source folder (required to build)
  -kcfg folder          folder with kernel config (takes 1st file named *.config)
  -kgood tag            The good kernel commit/tag
  -kbad tag             The bad kernel commit/tag
  -ktest file           An exec script which determines good or bad on target
  -host hostname        hostname of target machine used for testing
  -addr ip              ip address or hostname.domain of remote machine
  -user username        username to use to ssh to remote machine
  Optional args:
  -userinput            allow user interaction when input is required
  -pkgfmt type          kernel package format [rpm/deb] (default: deb)
  -pkgout folder        output folder for kernel packages (default: ksrc/..)

 online - test target machines to verify identity and connectivity

  Required args:
  -machines file        input/output file with host/ip/user list and status
  Optional args:
  -userinput            allow user interaction when executing remote commands

 install - install the kernel packages & tools on multiple systems

  Required args:
  -machines file        input/output file with host/ip/user list and status
  -pkgfmt type          kernel package format [rpm/deb] (default: deb)
  -pkgout folder        output folder for kernel packages (default: ksrc/..)
  -kernel string        kernel version to install from a package in pkgout

 ready - check target systems to see if they're ready to test

  Required args:
  -machines file        input/output file with host/ip/user list and status
  Optional args:
  -userinput            allow user interaction when executing remote commands

 run - run a set of tests on these systems via ssh, store the data on host

  Required args:
  -machines file        input/output file with host/ip/user list and status
  -kernel string        kernel version to install from a package in pkgout
  -mode suspendmode     suspend mode to test with sleepgraph on remote machine
                        can be mem, freeze, or all
  [use either count or duration]
  -count count          maximum sleepgraph iterations to run
  -duration minutes     maximum duration in minutes to iterate sleepgraph
  Optional args:
  -testout folder       output folder for test data (default: .)
  -resetcmd cmdstr      optional command used to reset the remote machine
                        (used on offline/hung machines with "online"/"run")
  -failmax count        maximum consecutive sleepgraph fails before testing
                        stops

 runmulti - spawn a sleepgraph -multi run on a target system and exit

  Required args:
  -machines file        input/output file with host/ip/user list and status
  -kernel string        kernel version to install from a package in pkgout
  -mode suspendmode     suspend mode to test with sleepgraph on remote machine
                        can be mem, freeze, or all
  [use either count or duration]
  -count count          maximum sleepgraph iterations to run
  -duration minutes     maximum duration in minutes to iterate sleepgraph

------------------------------------------------------------------
|                         EXAMPLES                               |
------------------------------------------------------------------

  Typical build/install/run routine for stresstesting

  ./stresstest.py -config config/stresstest-intel.cfg build
  labmachine qlist > ~/workspace/stressconfig/machine.txt
  ./stresstest.py -config config/stresstest-intel.cfg -kernel <version> build
  ./stresstest.py -config config/stresstest-intel.cfg -kernel <version> install
  ./stresstest.py -config config/stresstest-intel.cfg -kernel <version> ready
  ./stresstest.py -config config/stresstest-intel.cfg -kernel <version> -mode all -duration 1440 run

  Bisect a kernel source tree, built locally, tested remotely

  ./stresstest.py
	-kgood 4ce1b97949cbf46e847722461386170e0f709c59  # the known good commit
	-kbad b7270c69a36efc61ed6ebd31a8a458f354a6edc0   # the known bad commit
	-ktest bisect-test.sh           # executable script to test good/bad on remote system
	                                # last output line should be "GOOD" or "BAD"
	-ksrc ~/workspace/linux         # a kernel source tree with no patches applied
	-kcfg ~/workspace/stressconfig  # a folder that includes the latest.config file
	                                # bisect loads the first *.config file it sees
	-host mytestmachine             # target machine hostname
	-user myusername                # target machine username
	-addr 192.168.1.23              # target machine ip addr
	-pkgout ~/workspace/bisecttest  # local folder to store the kernel bisect packages
	                                # bisect builds each step N as linux-version-bisectN.deb
	-userinput                      # allow the tool to ask for input if things go awry
	                                # required if you don't include -ktest, it also
	                                # allows you to fix issues without having to restart
	bisect
